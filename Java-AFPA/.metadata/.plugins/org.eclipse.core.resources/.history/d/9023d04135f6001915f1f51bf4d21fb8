import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.util.List;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JTextArea;

public class MainFrame extends JFrame {
	private FormPanel formPanel;
	private ModelPendu modelPendu;
	private Header header;
	private PenduPanel penduPanel;
	
	public MainFrame(String hiddenWord) {
		super("Pendu");
		
		setLayout(new BorderLayout());
		
		this.formPanel = new FormPanel();
		this.modelPendu = new ModelPendu(hiddenWord);
		this.header = new Header(getDiscoveredWord());
		
		formPanel.setFormListener(new FormListener() {
			public void formEventOccurred(FormEvent e) {
				char letter = e.getLetter();
				header.updateMessageLabel("");
				
				if (isLetterAlreadyUsed(letter)) {
					header.updateMessageLabel("You have already used this letter, please try again!");
				} else {
					addLetterAsUsed(letter);
					incrementTries();
					
					if (hasLetter(letter) && isLetterAStar(letter)) {
						modifyDiscoveredWord(letter);
						header.setDiscoveredWord(getDiscoveredWord());
						incrementLettersGuessed();
					} else {
						decrementLifes();
					}
				}
			}
		});
		
		add(formPanel, BorderLayout.SOUTH);
		add(header, BorderLayout.NORTH);
		
		setSize(600, 500);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setVisible(true);
	}
	
	private boolean isLetterAlreadyUsed(char letter) {
		return this.modelPendu.getLettersUsed().contains(letter);
	}
	
	private void addLetterAsUsed(char letter) {
		this.modelPendu.addUsedLetter(letter);
	}
	
	private void incrementTries() {
		int currentTries = this.modelPendu.getNbTries();
		this.modelPendu.setNbTries(currentTries + 1);
	}
	
	private boolean hasLetter(char letter) {
		int index = getIndexOfLetter(letter);
		return index > -1;
	}
	
	private int getIndexOfLetter(char letter) {
		return this.modelPendu.getHiddenWord().indexOf(letter);
	}
	
	private boolean isLetterAStar(char letter) {
		int index = getIndexOfLetter(letter);
		return this.modelPendu.getDiscoveredWord()[index] == '*';
	}
	
	private void modifyDiscoveredWord(char letter) {
		String hiddenWord = this.modelPendu.getHiddenWord();
		char[] discoveredWord = this.modelPendu.getDiscoveredWord();
		char[] discoveredWordCopy = new char[discoveredWord.length];
		discoveredWordCopy = discoveredWord.clone();
		
		for (int j = 0; j < hiddenWord.length(); j++) {
			if (hiddenWord.charAt(j) == letter) {
				discoveredWordCopy[j] = letter;
			}
		}
		
		this.modelPendu.setDiscoveredWord(discoveredWordCopy);
	}
	
	private void incrementLettersGuessed() {
		int currentLettersGuessed = this.modelPendu.getLettersGuessed();
		this.modelPendu.setLettersGuessed(currentLettersGuessed + 1);
	}

	private void decrementLifes() {
		int currentLifes = this.modelPendu.getNbLifes();
		this.modelPendu.setNbLifes(currentLifes - 1);
	}

	private String getDiscoveredWord() {
		return String.valueOf(this.modelPendu.getDiscoveredWord());
	}

	private void updateHeaderMsg(String msg) {
		header.updateMessageLabel(msg);
	}
}
